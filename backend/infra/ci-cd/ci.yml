name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - "backend/**"
      - "configs/**"
      - "tests/**"
      - "docker/**"
      - ".github/workflows/ci.yml"
      - "pyproject.toml"
      - "requirements*.txt"
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"
  POETRY_VIRTUALENVS_CREATE: "false"
  REGISTRY: ghcr.io
  IMAGE_NAME_BASE: ${{ github.repository }}-base
  IMAGE_NAME_WORKER: ${{ github.repository }}-worker

permissions:
  contents: read
  packages: write

jobs:
  lint-typecheck:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py311-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py311-

      - name: Install baseline tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit

      - name: Install project (lightweight)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e . || true; fi

      - name: Ruff (lint)
        run: ruff check .

      - name: Mypy (type check)
        run: |
          mypy --install-types --non-interactive backend || true
          mypy backend

      - name: Bandit (security scan)
        run: bandit -r backend -q -ll

  tests:
    name: Tests (pytest) â€¢ Python ${{ matrix.python }}
    runs-on: ubuntu-latest
    needs: [lint-typecheck]
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]
    services:
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py${{ matrix.python }}-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py${{ matrix.python }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
          # Optional extras your code may use:
          pip install yfinance numpy pandas torch --only-binary=:all: || true
          pip install qiskit qiskit-aer qiskit-algorithms || true

      - name: Run tests
        env:
          REDIS_URL: redis://localhost:6379/0
          ENV: test
        run: |
          pytest -q --maxfail=1 --disable-warnings \
                 --cov=backend --cov-report=xml --cov-report=term-missing

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python }}
          path: coverage.xml

  docker-build:
    name: Docker Build (base & worker)
    runs-on: ubuntu-latest
    needs: [tests]
    if: github.event_name != 'pull_request'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: secrets.GHCR_PAT != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build base image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/base.dockerfile
          push: ${{ secrets.GHCR_PAT != '' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build worker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: worker.dockerfile
          push: ${{ secrets.GHCR_PAT != '' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:${{ github.sha }}
          build-args: |
            GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-typecheck, tests, docker-build]
    if: always()
    steps:
      - name: Report job results
        run: |
          echo "Lint/Typecheck: ${{ needs.lint-typecheck.result }}"
          echo "Tests:          ${{ needs.tests.result }}"
          echo "Docker Build:   ${{ needs.docker-build.result }}"