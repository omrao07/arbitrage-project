import React from "react";

const WeightsDashboard = ({ strategies, onWeightChange }) => {
  const totalWeight = strategies.reduce((acc, s) => acc + s.weight, 0);

  return (
    <div className="p-6 bg-white shadow-md rounded-xl w-full max-w-4xl mx-auto">
      <h2 className="text-xl font-semibold mb-4 text-gray-800">Strategy Weights</h2>
      <table className="w-full text-sm text-left border">
        <thead className="bg-gray-100 text-gray-600 uppercase text-xs">
          <tr>
            <th className="p-2">Name</th>
            <th className="p-2">Type</th>
            <th className="p-2 text-right">Weight (%)</th>
            <th className="p-2 text-right">Sharpe</th>
            <th className="p-2 text-right">Return</th>
          </tr>
        </thead>
        <tbody>
          {strategies.map((strategy) => (
            <tr
              key={strategy.id}
              className="border-b hover:bg-gray-50 transition duration-100"
            >
              <td className="p-2 font-medium text-gray-700">{strategy.name}</td>
              <td className="p-2 capitalize">
                <span
                  className={`px-2 py-1 rounded-full text-xs ${
                    strategy.type === "alpha"
                      ? "bg-blue-100 text-blue-700"
                      : "bg-yellow-100 text-yellow-700"
                  }`}
                >
                  {strategy.type}
                </span>
              </td>
              <td className="p-2 text-right">
                <input
                  type="number"
                  min="0"
                  max="100"
                  step="0.1"
                  value={strategy.weight}
                  onChange={(e) =>
                    onWeightChange(strategy.id, parseFloat(e.target.value))
                  }
                  className="w-20 px-2 py-1 border border-gray-300 rounded text-right"
                />
              </td>
              <td className="p-2 text-right">{strategy.sharpe.toFixed(2)}</td>
              <td className="p-2 text-right">
                {(strategy.expected_return * 100).toFixed(2)}%
              </td>
            </tr>
          ))}
        </tbody>
        <tfoot>
          <tr className="bg-gray-50 text-gray-600">
            <td className="p-2 font-bold">Total</td>
            <td></td>
            <td className="p-2 text-right font-bold">
              {totalWeight.toFixed(1)}%
            </td>
            <td></td>
            <td></td>
          </tr>
        </tfoot>
      </table>
    </div>
  );
};

export default WeightsDashboard;