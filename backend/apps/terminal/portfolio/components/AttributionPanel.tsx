// app/components/attributionpanel.tsx (place anywhere you like)
// No imports. Lightweight, zero-dependency attribution / sources panel.
// - Works without hooks (uses <details> for expand/collapse)
// - Optional "Copy" button copies a plain-text attribution summary
// - Inline styles only; dark-mode friendly basics

"use client";

type Source = {
  name: string;
  url?: string;
  license?: string;
  logoUrl?: string; // optional small logo (24px suggested)
  note?: string;
};

type Generator = {
  name: string;
  version?: string;
  url?: string;
};

type Props = {
  title?: string;                 // default: "Attribution & Sources"
  description?: string;           // short text under the title
  sources: Source[];              // list of content providers
  generator?: Generator;          // app/tool that produced the output
  dataset?: string[];             // dataset names (optional)
  updatedAt?: number | string;    // epoch ms or ISO
  contact?: string;               // "support@example.com" etc
  showCopy?: boolean;             // default true
};

export default function AttributionPanel({
  title = "Attribution & Sources",
  description,
  sources,
  generator,
  dataset,
  updatedAt,
  contact,
  showCopy = true,
}: Props) {
  function copyAsText() {
    const txt = buildPlainText({
      title,
      sources,
      generator,
      dataset,
      updatedAt,
      contact,
    });
    try {
      navigator.clipboard?.writeText(txt);
      toast("Attribution copied");
    } catch {
      toast("Copy failed");
    }
  }

  function toast(msg: string) {
    const el = document.getElementById("attrib-toast");
    if (!el) return;
    el.textContent = msg;
    el.style.opacity = "1";
    setTimeout(() => (el.style.opacity = "0"), 1200);
  }

  const shown = sources.slice(0, 6);
  const hasMore = sources.length > shown.length;

  return (
    <section style={wrap} aria-label="Attribution panel">
      <style>{css}</style>
      <div id="attrib-toast" style={toastStyle} />

      <div style={card}>
        <header style={headRow}>
          <div style={{ display: "flex", alignItems: "center", gap: 10 }}>
            <span aria-hidden="true" style={icon}>ⓘ</span>
            <div>
              <h3 style={h3}>{title}</h3>
              {description ? <p style={sub}>{description}</p> : null}
            </div>
          </div>

          {showCopy ? (
            <button type="button" onClick={copyAsText} style={copyBtn}>Copy</button>
          ) : null}
        </header>

        {/* Meta */}
        <div style={metaRow}>
          {updatedAt ? (
            <div style={metaItem}>
              <span style={metaLabel}>Last updated</span>
              <span>{fmtDate(updatedAt)}</span>
            </div>
          ) : null}

          {generator?.name ? (
            <div style={metaItem}>
              <span style={metaLabel}>Generated by</span>
              {generator.url ? (
                <a href={generator.url} target="_blank" rel="noreferrer" style={link}>
                  {generator.name}{generator.version ? ` v${generator.version}` : ""}
                </a>
              ) : (
                <span>{generator.name}{generator.version ? ` v${generator.version}` : ""}</span>
              )}
            </div>
          ) : null}

          {dataset?.length ? (
            <div style={metaItem}>
              <span style={metaLabel}>Datasets</span>
              <span>{dataset.join(", ")}</span>
            </div>
          ) : null}

          {contact ? (
            <div style={metaItem}>
              <span style={metaLabel}>Contact</span>
              <a href={`mailto:${contact}`} style={link}>{contact}</a>
            </div>
          ) : null}
        </div>

        {/* Sources */}
        <div style={block}>
          <div style={blockTitle}>Sources</div>

          {sources.length === 0 ? (
            <p style={muted}>No sources listed.</p>
          ) : (
            <>
              <ul style={list}>
                {shown.map((s, i) => (
                  <li key={`${s.name}-${i}`} style={li}>
                    {s.logoUrl ? (
                      <img
                        src={s.logoUrl}
                        alt=""
                        style={logo}
                        width={18}
                        height={18}
                        loading="lazy"
                      />
                    ) : null}
                    {s.url ? (
                      <a href={s.url} target="_blank" rel="noreferrer" style={link}>
                        {s.name}
                      </a>
                    ) : (
                      <span>{s.name}</span>
                    )}
                    {s.license ? <span style={badge}>{s.license}</span> : null}
                    {s.note ? <span style={note}>· {s.note}</span> : null}
                  </li>
                ))}
              </ul>

              {hasMore ? (
                <details style={detailsBox}>
                  <summary style={summaryStyle}>Show {sources.length - shown.length} more</summary>
                  <ul style={list}>
                    {sources.slice(shown.length).map((s, i) => (
                      <li key={`${s.name}-m${i}`} style={li}>
                        {s.logoUrl ? <img src={s.logoUrl} alt="" style={logo} width={18} height={18} loading="lazy" /> : null}
                        {s.url ? (
                          <a href={s.url} target="_blank" rel="noreferrer" style={link}>
                            {s.name}
                          </a>
                        ) : (
                          <span>{s.name}</span>
                        )}
                        {s.license ? <span style={badge}>{s.license}</span> : null}
                        {s.note ? <span style={note}>· {s.note}</span> : null}
                      </li>
                    ))}
                  </ul>
                </details>
              ) : null}
            </>
          )}
        </div>

        {/* Disclaimer */}
        <div style={block}>
          <div style={blockTitle}>Disclaimer</div>
          <p style={smallText}>
            Titles, summaries, and metadata may be generated or normalized for consistency. Links
            lead to third-party sites that retain ownership of their content. Always verify
            critical information with the original source.
          </p>
        </div>
      </div>
    </section>
  );
}

/* ---------------- helpers ---------------- */
function fmtDate(d: number | string) {
  const ts = typeof d === "number" ? d : Date.parse(d);
  if (!Number.isFinite(ts)) return String(d);
  const dt = new Date(ts);
  return dt.toLocaleString();
}

function buildPlainText(opts: {
  title: string;
  sources: Source[];
  generator?: Generator;
  dataset?: string[];
  updatedAt?: number | string;
  contact?: string;
}) {
  const lines: string[] = [];
  lines.push(opts.title || "Attribution & Sources");
  if (opts.updatedAt) lines.push(`Last updated: ${fmtDate(opts.updatedAt)}`);
  if (opts.generator?.name) {
    lines.push(
      `Generated by: ${opts.generator.name}${opts.generator.version ? " v" + opts.generator.version : ""}${
        opts.generator.url ? " (" + opts.generator.url + ")" : ""
      }`,
    );
  }
  if (opts.dataset?.length) lines.push(`Datasets: ${opts.dataset.join(", ")}`);
  lines.push("");
  lines.push("Sources:");
  if (opts.sources.length === 0) {
    lines.push("- (none)");
  } else {
    for (const s of opts.sources) {
      const parts = [s.name];
      if (s.url) parts.push(s.url);
      if (s.license) parts.push(`license: ${s.license}`);
      if (s.note) parts.push(s.note);
      lines.push("- " + parts.join(" · "));
    }
  }
  if (opts.contact) {
    lines.push("");
    lines.push(`Contact: ${opts.contact}`);
  }
  return lines.join("\n");
}

/* ---------------- styles ---------------- */
const wrap: any = { padding: 12 };
const card: any = {
  background: "#fff",
  border: "1px solid rgba(0,0,0,0.08)",
  borderRadius: 14,
  boxShadow: "0 6px 24px rgba(0,0,0,0.04)",
  padding: 16,
  display: "flex",
  flexDirection: "column",
  gap: 12,
};

const headRow: any = { display: "flex", alignItems: "center", justifyContent: "space-between", gap: 8 };
const icon: any = { fontSize: 18, lineHeight: 1 };
const h3: any = { margin: 0, fontSize: 16, lineHeight: "22px" };
const sub: any = { margin: "2px 0 0", color: "#555", fontSize: 13 };

const copyBtn: any = {
  appearance: "none",
  border: "1px solid #d4d4d8",
  background: "#f4f4f5",
  color: "#111",
  borderRadius: 10,
  padding: "6px 10px",
  cursor: "pointer",
  fontSize: 13,
};

const metaRow: any = { display: "flex", flexWrap: "wrap", gap: 12 };
const metaItem: any = { display: "flex", gap: 6, alignItems: "baseline" };
const metaLabel: any = { color: "#666", fontSize: 12 };

const block: any = { display: "flex", flexDirection: "column", gap: 8 };
const blockTitle: any = { fontWeight: 600, fontSize: 14 };

const list: any = { listStyle: "none", padding: 0, margin: 0, display: "grid", gridTemplateColumns: "1fr", gap: 6 };
const li: any = { display: "flex", alignItems: "center", gap: 8, minHeight: 22 };
const logo: any = { width: 18, height: 18, borderRadius: 4, objectFit: "cover", background: "#fafafa" };
const link: any = { color: "#0f62fe", textDecoration: "none" };
const note: any = { color: "#666", fontSize: 12 };
const badge: any = { background: "#f5f5f7", border: "1px solid #e5e7eb", borderRadius: 999, padding: "2px 8px", fontSize: 12, whiteSpace: "nowrap" };
const muted: any = { color: "#666", fontSize: 13 };

const detailsBox: any = { borderTop: "1px dashed #eee", paddingTop: 6, marginTop: 2 };
const summaryStyle: any = { cursor: "pointer", fontWeight: 600, fontSize: 12.5, color: "#111" };

const smallText: any = { color: "#555", fontSize: 13, lineHeight: "20px", margin: 0 };

const toastStyle: any = {
  position: "fixed",
  right: 16,
  bottom: 16,
  background: "#111",
  color: "#fff",
  padding: "8px 12px",
  borderRadius: 10,
  opacity: 0,
  transition: "opacity .25s ease",
  pointerEvents: "none",
  zIndex: 50,
};

const css = `
  @media (prefers-color-scheme: dark) {
    section > div[style] {
      background: #0b0b0c !important;
      border-color: rgba(255,255,255,0.08) !important;
      box-shadow: 0 6px 24px rgba(0,0,0,0.6) !important;
    }
    a { color: #9ecaff; }
  }
`;
